{
  "name": "uncurled",
  "version": "1.3.0",
  "description": "Like curl, but in pure JavaScript.",
  "main": "index.js",
  "bin": {
    "uncurl": "./bin/uncurl"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/othiym23/uncurled.git"
  },
  "keywords": [
    "curl",
    "wget",
    "cli",
    "fetch",
    "http"
  ],
  "author": {
    "name": "Forrest L Norvell",
    "email": "ogd@aoaioxxysz.net"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/othiym23/uncurled/issues"
  },
  "dependencies": {
    "optimist": "~0.5.2",
    "request": "~2.21.0",
    "http-status-codes": "~1.0.2",
    "urlencode-stream": "~1.0.1",
    "readable-stream": "~1.0.2"
  },
  "readme": "Like `curl`, but does way less. Runs anywhere Node.js does.\n\n```\nUsage: uncurl [options...] <url>\n\nOptions:\n  -i, --include  Include protocol headers in the output  [boolean]\n  -X, --request  Specify request command to use          [string]  [default: \"GET\"]\n  -d, --data     HTTP POST data                          [string]\n  --data-ascii   HTTP POST ASCII data                    [string]\n  --data-binary  HTTP POST binary data                   [string]\n  --data-json    HTTP POST JSON data                     [string]\n```\n\n*NOTE:* for the long parameters, if you want to read from standard input,\nyou'll need to invoke the option like so: `--data-binary=-`.\n\n`--data` (and `--data-ascii`) works much like `curl` â€“ a prefix of `@`\nindicates that the relevant data should be streamed from the file path after\nthe splat, and passing `-` as the parameter to `--data` will read from standard\ninput until EOF. Data will be sent as Content-Type\n`application/x-www-form-urlencoded`.\n\n`--data-binary` works a little differently from the `curl` option of the same\nname. It doesn't URL encode the data, but it does set the Content-Type to\n`application/octet-stream`, and sends the data with a binary encoding. It also\nallows the use of `@` to read files and `-` for standard input.\n\n`--data-json` is an option unique to `uncurl`. If the data isn't streaming\n(that is, coming from a file or standard input), `uncurl` will verify that it's\nvalid JSON before sending it to the server. It will also set the Content-Type\nto `application/json` and the encoding to UTF-8. It also allows the use of `@`\nto read files and `-` for standard input.\n",
  "readmeFilename": "README.md",
  "_id": "uncurled@1.3.0",
  "_from": "uncurled@~1.3.0"
}
